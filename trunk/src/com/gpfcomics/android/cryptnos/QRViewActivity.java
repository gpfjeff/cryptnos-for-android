/* QRViewActivity.java
 * 
 * PROGRAMMER:    Jeffrey T. Darlington
 * DATE:          November 3, 2011
 * PROJECT:       Cryptnos (Android)
 * ANDROID V.:	  1.1
 * REQUIRES:      
 * REQUIRED BY:   
 * 
 * Some third-party QR code generating apps display the generated codes themselves,
 * while others pass out an image or a path to an image file.  This activity displays
 * QR code images generated by the second class of apps.  When called via Intent, it
 * looks for the necessary data to display the code image then loads and displays it. 
 * 
 * This program is Copyright 2011, Jeffrey T. Darlington.
 * E-mail:  android_support@cryptnos.com
 * Web:     http://www.cryptnos.com/
 * 
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See theGNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
*/
package com.gpfcomics.android.cryptnos;

import java.io.File;

import android.app.Activity;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.widget.ImageView;
import android.widget.Toast;

/**
 * Some third-party QR code generating apps display the generated codes themselves,
 * while others pass out an image or a path to an image file.  This activity displays
 * QR code images generated by the second class of apps.  When called via Intent, it
 * looks for the necessary data to display the code image then loads and displays it. 
 * @author Jeffrey T. Darlington
 * @version 1.3.0
 * @since 1.3.0
 */
public class QRViewActivity extends Activity {

	/** The full path to the image file */
	private String pathToImage = null;
	
	/** The ImageView widget that will display the code */
	private ImageView imgQRCode = null;
	
    @Override
	public void onCreate(Bundle savedInstanceState) {
        // The usual GUI setup stuff:
    	super.onCreate(savedInstanceState);
        setContentView(R.layout.qrview_layout);
        // Get a handy reference to the image view that will display the code:
        imgQRCode = (ImageView)findViewById(R.id.imgQRCode);
        // Now put on our asbestos underpants:
        try {
        	// First, check to see if we have a previous view state.  This can occur
        	// if the activity was previously built but then destroyed and rebuilt.
        	// This usually happens if there's an orientation change.  If such state
        	// information exists, reinstate it:
        	final QRViewState state = (QRViewState)getLastNonConfigurationInstance();
        	if (state != null) {
        		pathToImage = state.getPathToFile();
        		imgQRCode.setImageDrawable(state.getDrawable());
        	// If there is no previous state, get the the bundle passed in with the
        	// intent and fetch the image information from it, then display the
        	// image:
        	} else {
	        	Bundle extras = getIntent().getExtras();
	            if (extras != null)
	            {
	            	pathToImage = extras.getString("qrcode_file");
	            	imgQRCode.setImageBitmap(BitmapFactory.decodeFile(pathToImage, null));
	            // If there was image information, we must have been called by
	            // accident.  Finish this activity and bail out:
	            } else finish();
        	}
        // If anything blew up, bail out:
        } catch (Exception e) {
        	Toast.makeText(getBaseContext(), "ERROR: " + e.getMessage(),
    				Toast.LENGTH_LONG).show();
        	finish();
        }
    }
    
    @Override
    protected void onStop()
    {
    	// If we're stopping, delete the image file off of external storage if
    	// it still exists:
    	try {
    		File theFile = new File(pathToImage);
    		theFile.delete();
    	} catch (Exception e) {}
    	super.onStop();
    }
    
	public Object onRetainNonConfigurationInstance() {
		// Take note of view state so that we can restore it later:
		final QRViewState state = new QRViewState(imgQRCode.getDrawable(), pathToImage);
		return state;
	}
    
	/**
	 * This internal private class defines the QRViewActivity view state, which will
	 * help restore it after a configuration change such as a change in orientation.
	 * @author Jeffrey T. Darlington
	 * @version 1.3.0
	 * @since 1.3.0
	 *
	 */
	private class QRViewState {
		
		/** The Drawable representing the QR code image itself */
		private Drawable drawable = null;
		
		/** The path to the QR code image file */
		private String pathToFile = null;
		
		/**
		 * The constructor
		 * @param drawable The Drawable representing the QR code image itself
		 * @param pathToFile The path to the QR code image file
		 */
		protected QRViewState(Drawable drawable, String pathToFile) {
			this.drawable = drawable;
			this.pathToFile = pathToFile;
		}
		
		/**
		 * Return the Drawable representing the QR code image itself
		 * @return The Drawable representing the QR code image itself
		 */
		protected Drawable getDrawable() { return drawable; }
		
		/**
		 * Return the path to the QR code image file
		 * @return The path to the QR code image file
		 */
		protected String getPathToFile() { return pathToFile; }
		
	}
	
}
